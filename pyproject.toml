[build-system]
requires = ["setuptools>=61.0.0", "wheel", "setuptools_scm"]
build-backend = "setuptools.build_meta"

[project]
name = "t2d-baseline-paper"
version = "0.0.1"
description = "T2D baseline paper"
authors = [
  {name = "Martin Bernstorff", email = "martinbernstorff@gmail.com"}
]
classifiers = [
  "Operating System :: POSIX :: Linux",
  "Operating System :: MacOS :: MacOS X",
  "Operating System :: Microsoft :: Windows",
  "Programming Language :: Python :: 3",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10"
]
requires-python = ">=3.9"
dependencies = [
  "pandas>=1.4.3,<1.5.0",
  # Shap dependencies
  "shap>=0.41.0",
  "ipython>=8.10.0",
  "psycop-model-training @ git+https://github.com/Aarhus-Psychiatry-Research/psycop-model-training#egg=psycop_model_training",
  "psycop-model-evaluation @ git+https://github.com/Aarhus-Psychiatry-Research/psycop-model-evaluation#egg=psycop_model_evaluation",
  "zenml[server]>=0.34.0,<0.35.0",
  "pydantic"
]

[project.license]
file = "LICENSE"
name = "MIT"

[project.optional-dependencies]
dev = [
  "cruft",
  "black",
  "mypy",
  "pre-commit==2.20.0,<2.21.0",
  "ruff==0.0.254", # important that these match the pre-commit hooks
  "black==22.8.0", # important that these match the pre-commit hooks
  "pandas-stubs"
]
tests = [
  "pytest>=7.1.3,<7.3.0",
  "pytest-cov>=3.0.0,<3.1.0",
  "pytest-xdist>=3.0.0,<3.2.0",
  "typeguard>=2.13.3,<2.14.0"
]

[project.urls]
homepage = "https://github.com/MartinBernstorff/t2d-baseline-paper"
repository = "https://github.com/MartinBernstorff/t2d-baseline-paper"
documentation = "https://MartinBernstorff.github.io/t2d-baseline-paper/"

[tool.coverage.run]
omit = [
  "**/tests/*",
  "**/_vendorized/*",
  "**/about.py"
]
exclude_lines = [
  "pragma: no cover",
  # Don't complain about missing debug-only code:
  "def __unicode__",
  "def __repr__",
  "if self.debug",
  # Don't complain if tests don't hit defensive assertion code:
  "raise AssertionError",
  "raise NotImplementedError",
  # Don't complain if non-runnable code isn't run:
  "if 0:",
  "if __name__ == .__main__.:"
]

[tool.mypy]
ignore_missing_imports = true
no_implicit_optional = true
warn_unused_ignores = false
warn_unreachable = true
plugins = "pydantic.mypy"

[tool.pydantic-mypy]
init_typed = true
warn_untyped_fields = true

[tool.pytest.ini_options]
markers = [
  "pre_push_test: Tests run on push. Should be as minimal as possible to maintain fast push speeds."
]
pythonpath = [
  "."
]

[tool.ruff]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = [
  "A",
  "ANN",
  "ARG",
  "B",
  "C4",
  "COM",
  "D417",
  "E",
  "ERA",
  "F",
  "I",
  "ICN",
  "NPY001",
  "PD002",
  "PIE",
  "PLE",
  "PLW",
  "PT",
  "UP",
  "Q",
  "PTH",
  "RSE",
  "RET",
  "RUF",
  "SIM",
  "W"
]
ignore = [
  "ANN101",
  "ANN401",
  "E402",
  "E501",
  "F401",
  "F841",
  "RET504"
]
# Allow autofix for all enabled rules (when `--fix`) is provided.
unfixable = ["ERA"]
# Exclude a variety of commonly ignored directories.
exclude = [
  ".bzr",
  ".direnv",
  ".eggs",
  ".git",
  ".hg",
  ".mypy_cache",
  ".nox",
  ".pants.d",
  ".pytype",
  ".ruff_cache",
  ".svn",
  ".tox",
  ".venv",
  "__pypackages__",
  "_build",
  "buck-out",
  "build",
  "dist",
  "node_modules",
  "venv",
  "__init__.py"
]
# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"
target-version = "py39"

[tool.ruff.flake8-annotations]
mypy-init-return = true
suppress-none-returning = true

[tool.ruff.isort]
known-third-party = ["wandb"]

[tool.ruff.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.semantic_release]
branch = "main"
version_variable = [
  "pyproject.toml:version"
]
upload_to_pypi = false
upload_to_release = true
build_command = "python -m pip install build; python -m build"

[tool.setuptools]
include-package-data = true
